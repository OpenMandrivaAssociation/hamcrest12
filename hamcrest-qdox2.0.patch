From 63fdeef6281ac0d8c7f8cb8d92a23cc6f0782c28 Mon Sep 17 00:00:00 2001
From: Joseph Walton <joe@kafsemo.org>
Date: Mon, 22 Sep 2014 23:28:44 +1000
Subject: [PATCH] Use QDox 2 for hamcrest-generator.

Upgrade the build and fix API changes.
---
 .../src/main/java/org/hamcrest/generator/QDox.java |  4 ++--
 .../org/hamcrest/generator/QDoxFactoryReader.java  | 26 ++++++++++++----------
 3 files changed, 18 insertions(+), 16 deletions(-)

diff --git a/hamcrest-generator/src/main/java/org/hamcrest/generator/QDox.java b/hamcrest-generator/src/main/java/org/hamcrest/generator/QDox.java
index c1798f2..783222c 100644
--- a/hamcrest-generator/src/main/java/org/hamcrest/generator/QDox.java
+++ b/hamcrest-generator/src/main/java/org/hamcrest/generator/QDox.java
@@ -1,6 +1,6 @@
 package org.hamcrest.generator;
 
-import com.thoughtworks.qdox.JavaDocBuilder;
+import com.thoughtworks.qdox.JavaProjectBuilder;
 import com.thoughtworks.qdox.model.JavaClass;
 
 import java.io.File;
@@ -16,7 +16,7 @@
  */
 public class QDox {
 
-    private final JavaDocBuilder javaDocBuilder = new JavaDocBuilder();
+    private final JavaProjectBuilder javaDocBuilder = new JavaProjectBuilder();
 
     public void addSourceTree(File sourceDir) {
         javaDocBuilder.addSourceTree(sourceDir);
--- hamcrest-1.2/hamcrest-generator/src/main/java/org/hamcrest/generator/QDoxFactoryReader.java.orig	2008-11-20 19:09:45.000000000 +0000
+++ hamcrest-1.2/hamcrest-generator/src/main/java/org/hamcrest/generator/QDoxFactoryReader.java	2014-12-23 06:31:56.072148559 +0000
@@ -4,8 +4,10 @@
 import com.thoughtworks.qdox.model.JavaClass;
 import com.thoughtworks.qdox.model.JavaMethod;
 import com.thoughtworks.qdox.model.JavaParameter;
-import com.thoughtworks.qdox.model.Type;
+import com.thoughtworks.qdox.model.JavaType;
+import com.thoughtworks.qdox.model.impl.DefaultJavaType;
 
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Pattern;
@@ -52,15 +54,15 @@
         JavaMethod methodSource = findMethodInSource(factoryMethod);
         if (methodSource != null) {
             factoryMethod.setJavaDoc(createJavaDocComment(methodSource));
-            JavaParameter[] parametersFromSource
+            List<JavaParameter> parametersFromSource
                     = methodSource.getParameters();
             List<FactoryMethod.Parameter> parametersFromReflection
                     = factoryMethod.getParameters();
 
-            if (parametersFromReflection.size() == parametersFromSource.length) {
-                for (int i = 0; i < parametersFromSource.length; i++) {
+            if (parametersFromReflection.size() == parametersFromSource.size()) {
+                for (int i = 0; i < parametersFromSource.size(); i++) {
                     parametersFromReflection.get(i).setName(
-                            parametersFromSource[i].getName());
+                            parametersFromSource.get(i).getName());
                 }
             }
         }
@@ -75,16 +77,18 @@
         // Note, this doesn't always work - it struggles with some kinds of generics.
         // This seems to cover most cases though.
         List<FactoryMethod.Parameter> params = factoryMethod.getParameters();
-        Type[] types = new Type[params.size()];
-        for (int i = 0; i < types.length; i++) {
+        List<JavaType> types = new ArrayList<JavaType>();
+        boolean varArgs = false;
+        for (int i = 0; i < params.size(); i++) {
             // QDox ignores varargs and generics, so we strip them out to help QDox.
             String type = params.get(i).getType();
+            varArgs = VARARGS_REGEX.matcher(type).find();
             type = GENERIC_REGEX.matcher(type).replaceAll("");
             type = VARARGS_REGEX.matcher(type).replaceAll("");
-            types[i] = new Type(type);
+            types.add(new DefaultJavaType(type));
         }
-        JavaMethod[] methods = classSource.getMethodsBySignature(factoryMethod.getName(), types, false);
-        return methods.length == 1 ?  methods[0] : null;
+        List<JavaMethod> methods = classSource.getMethodsBySignature(factoryMethod.getName(), types, false, varArgs);
+        return methods.size() == 1 ?  methods.get(0) : null;
     }
 
     /**
@@ -92,8 +96,8 @@
      */
     private String createJavaDocComment(JavaMethod methodSource) {
         String comment = methodSource.getComment();
-        DocletTag[] tags = methodSource.getTags();
-        if ((comment == null || comment.trim().length() == 0) && tags.length == 0) {
+        List<DocletTag> tags = methodSource.getTags();
+        if ((comment == null || comment.trim().length() == 0) && tags.size() == 0) {
             return null;
         }
         StringBuilder result = new StringBuilder();
